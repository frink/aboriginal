# Build binutils, which provides the linker and assembler and such.

function configure_binutils()
{
  "$CURSRC/configure" --prefix="$STAGE_DIR" "$@" --target="$CROSS_TARGET" \
    --disable-nls --disable-shared --disable-multilib --disable-werror \
    --with-lib-path=lib --program-prefix="$PROGRAM_PREFIX" $BINUTILS_FLAGS

  [ $? -ne 0 ] && dienow
}

blank_workdir build-binutils

if [ -z "$HOST_ARCH" ]
then
  # Create a simple cross compiler, from this host to target $ARCH.
  # This has no prerequisites.

  # Define lots of environment variables to make configure behave.

  AR=ar AS=as LD=ld NM=nm OBJDUMP=objdump OBJCOPY=objcopy configure_binutils
else
  # Canadian cross for an arbitrary host/target.  The new compiler will run
  # on $HOST_ARCH as its host, and build executables for $ARCH as its target.
  # (Use host==target to produce a native compiler.)  Doing this requires
  # existing host ($HOST_ARCH) _and_ target ($ARCH) cross compilers as
  # prerequisites.


  AR="${HOST_ARCH}-ar" CC="${HOST_ARCH}-cc" configure_binutils \
    --build="$CROSS_HOST" --host="$CROSS_TARGET"
fi

# Now that it's configured, build and install binutils

make -j $CPUS configure-host &&
make -j $CPUS CFLAGS="-O2 $STATIC_FLAGS $CFLAGS" &&
make -j $CPUS install &&

# Fix up install

mkdir -p "$STAGE_DIR/include" &&
cp "$CURSRC/include/libiberty.h" "$STAGE_DIR/include" || dienow


if [ -z "$NO_CLEANUP" ]
then
  cd .. && rm -rf build-binutils || dienow
fi
