# Setup

# This file is a place for you to set configuration values.  This entire
# file is optional; by default all the variables documented in this file
# are left blank by the build.  Feel free to replace this file with your
# own version, or to set these as environment variables on the command line.

# By default root-filesystem.sh will build a native toolchain (binutils, gcc,
# make, bash, distcc).  Set this variable to "none" to skip all that, and
# build a root filesystem containing only uClibc and busybox.  You can also
# set it to "headers" to retain the linux/uClibc kernel headers (in case you'd
# like to build your own native toolchain based on a different compiler).
# If you set it to "only", it'll build a native toolchain (binutils, gcc,
# uClibc, and the kernel headers) and nothing else.

# export NATIVE_TOOLCHAIN=none
# export NATIVE_TOOLCHAIN=headers
# export NATIVE_TOOLCHAIN=only

# If this is set, root-filesystem.sh won't bother to create the normal
# directory hierarchy of /usr, /tmp, /etc, and so on.

# export ROOT_NODIRS=1

# If this is set, the build records the command lines run by each build into
# log files in the build directory, ala "build/cmdlines.$PACKAGENAME"

# export RECORD_COMMANDS=1

# If this is set, packages are statically linked.

# export BUILD_STATIC=1

# If this is set, build.sh will build a compiler statically linked
# against uClibc.  This indicates which host that compiler should run on.
# Note that most x86_64 systems can run a statically linked i686 binary even
# if they don't have the 32-bit libraries installed.

# export STATIC_CROSS_COMPILER_HOST=i686

# If this is set, build a standalone statically linked native compiler, to
# use an a target system that doesn't have development tools.

# export BUILD_STATIC_NATIVE_COMPILER=1

# This may be set by the target's "details" file, but you can override it here.
# You can set it to ext2, initramfs, or squashfs.  It defaults to squashfs
# if blank.

# export SYSIMAGE_TYPE=ext2

# Size of writeable HDA image (if any), defaults to 64 megs

# export SYSIMAGE_HDA_MEGS=64

# Set this to use symlinks instead of hard links when creating temporary copies
# of the source packages (in setupfor).  This is slower and uses more inodes,
# but allows the extracted source packages to live in a different filesystem
# than the build directory.

# export SNAPSHOT_SYMLINK=1

# Use qemu to run "hello world" built by the cross compiler.  Note that
# you need a working qemu application emulation to do this.  Specifically,
# to unbreak arm you need to "echo 0 > /proc/sys/vm/mmap_min_addr" as root.

# export CROSS_SMOKE_TEST=1

# If this is set, try downloading packages from this location first.

# export PREFERRED_MIRROR=http://impactlinux.com/fml/mirror

# If this is set, the toybox utilities will take precedence over busybox ones.

# export USE_TOYBOX=1

# Try development versions of these packages.  (Know what you're doing if
# you select these, it's quite possible the result won't work.)

# export USE_UNSTABLE=uClibc,busybox,toybox,linux,binutils,make,gcc-core,gcc-g++

# Debugging option to leave source in build/temp-$ARCH after build.
# export NO_CLEANUP=1

# Don't create tarballs at the end of each stage.
# export SKIP_STAGE_TARBALLS=1

# If this is set, the output of the various stages will be color coded.
# export USE_COLOR=1

if [ ! -z "$USE_COLOR" ]
then

  # If you'd like to change colors, do so here.

  # Black background 
  export BACKGROUND_COLOR="\e[40m"

  export DOWNLOAD_COLOR="$BACKGROUND_COLOR\e[34m"
  export HOST_COLOR="$BACKGROUND_COLOR\e[37m"
  export CROSS_COLOR="$BACKGROUND_COLOR\e[33m"
  export NATIVE_COLOR="$BACKGROUND_COLOR\e[35m"
  export PACKAGE_COLOR="$BACKGROUND_COLOR\e[36m"
fi

# Tell the linux kernel, uClibc, and busybox to show the actual build commands
# instead of pretty-print output.

# export BUILD_VERBOSE=1

# Don't update the title bar in the display

# export NO_TITLE_BAR=1

# Create a tarball with the files installed by each individual package at
# each stage of the build.

# export BINARY_PACKAGE_TARBALLS=1

# Set this if you want debug symbols in your binaries.

# export SKIP_STRIP=1

# This isn't actually one of our variables, but a number of packages listen
# to this to add extra debug info to their binaries.  (Use with SKIP_STRIP)

# export CFLAGS="-g"

# Define the C library used here. Default is uClibc
# export C_LIBRARY=uClibc
