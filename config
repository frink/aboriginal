# Setup

# This file is a place for you to set configuration values.  This entire
# file is optional; by default all the variables documented in this file
# are left blank by the build.  Feel free to replace this file with your
# own version, or to set these as environment variables on the command line.

# Set this to tell build.sh not to build a native toolchain.  (This means
# root-filesystem.sh won't have it either.)

# export NO_NATIVE_COMPILER=1

# If this is set, root-filesystem.sh won't bother to create the normal
# directory hierarchy of /usr, /tmp, /etc, and so on.

# export ROOT_NODIRS=1

# By default, busybox and the native compiler are built statically.
# (Building busybox static provides a 20% performance boost to autoconf
# under qemu, and building the native compiler static makes it more
# portable to other root filesystems.)

# To make those dynamic, set this to "none".  Set it to any other
# value to link all packages statically.

# export BUILD_STATIC=none
# export BUILD_STATIC=1

# If this is set, build.sh will build a cross compiler statically linked
# against uClibc.  This indicates which host that compiler should run on.
# Note that most x86_64 systems can run a statically linked i686 binary even
# if they don't have the 32-bit libraries installed, so that's a good default.

# export STATIC_CC_HOST=i686

# This may be set by the target's "details" file, but you can override it here.
# You can set it to ext2, initramfs, or squashfs.  It defaults to squashfs
# if blank.

# export SYSIMAGE_TYPE=ext2

# Size of writeable HDA image (if any), defaults to 64 megs

# export SYSIMAGE_HDA_MEGS=64

# Set this to use symlinks instead of hard links when creating temporary copies
# of the source packages (in setupfor).  This is slower and uses more inodes,
# but allows the extracted source packages to live in a different filesystem
# than the build directory.

# export SNAPSHOT_SYMLINK=1

# Use qemu to run "hello world" built by the cross compiler.  Note that
# you need a working qemu application emulation to do this.  Specifically,
# to unbreak arm you need to "echo 0 > /proc/sys/vm/mmap_min_addr" as root.

# export CROSS_SMOKE_TEST=1

# If this is set, try downloading packages from this location first.

# export PREFERRED_MIRROR=http://impactlinux.com/fml/mirror

# If this is set, the toybox utilities will take precedence over busybox ones.

# export USE_TOYBOX=1

# Try development versions of these packages.  (Know what you're doing if
# you select these, it's quite possible the result won't work.)

# export USE_UNSTABLE=uClibc,busybox,toybox,linux,binutils,make,gcc-core,gcc-g++

# Debugging option to leave source in build/temp-$ARCH after build.

# export NO_CLEANUP=1

# Don't create tarballs at the end of each stage.

# export SKIP_STAGE_TARBALLS=1

# Tell the linux kernel, uClibc, and busybox to show the actual build commands
# instead of pretty-print output.

# export BUILD_VERBOSE=1

# Don't update the title bar in the display

# export NO_TITLE_BAR=1

# Create a tarball with the files installed by each individual package at
# each stage of the build.

# export BINARY_PACKAGE_TARBALLS=1

# Set this if you want debug symbols in your binaries.

# export SKIP_STRIP=1

# Set this to tell download.sh to extract all the tarballs up-front right
# after downloading them.  (Otherwise the tarball is extracted by setupfor
# the first time the build tries to use it.)
#
# Extracting tarballs early is useful in order to run multiple build.sh
# instances in parallel when building multiple targets, or to test that
# new patches added to the sources/patches directory apply cleanly.

# export EXTRACT_ALL=1

# This isn't actually one of our variables, but a number of packages listen
# to this to add extra debug info to their binaries.  (Use with SKIP_STRIP)

# export CFLAGS="-g"
