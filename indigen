#!/bin/bash

# version number
export VER="v1.6"

# copyright year
export YEAR="2013"

# command line caller
export CALL="$(basename "$0")"

# original cal path
export SAVEPATH="$PATH"

# base directory
export DIR_BASE="$(dirname $(readlink -f $0))"

# lirbrary directory
export DIR_LIBS="$DIR_BASE/library"

# commands directory
export DIR_CMDS="$DIR_BASE/commands"

# help directory
export DIR_HELP="$DIR_BASE/help"

# working directories
export DIR_TRGT="$PWD"

# build stage directory
export DIR_STGS="$DIR_TRGT/stages"

# build config directory
export DIR_CONF="$DIR_TRGT/config"

# source code directory
export DIR_CODE="$DIR_TRGT/sources"

# testing code directory
export DIR_CHCK="$DIR_TRGT/tests"

# host system directory
export DIR_HOST="$DIR_TRGT/host"

# target system directory
export DIR_WORK="$DIR_TRGT/work"

# temporary usage directory
export DIR_TEMP="$DIR_TRGT/temp"

# boolean basic switches
export NO_HEADER=""
export NO_CLEANUP=""
export NO_STRIP=""
export NO_SMOKETEST=""

# path includes host directory
PATH="$DIR_HOST:$PATH"

#@function indigen [command]
#@ - execute an indigen command
indigen() {
  [ -n "$1" ] && [ ! -f "$DIR_CMDS/$1" ] && show_error "'$1' is not a valid command"

  [ "$1" != "init" ] && check_init

  CONF_ERROR=$(find "$DIR_CMDS" "$DIR_STGS" "$DIR_CONF" -type f -iname "*.conf" | xargs -I {} bash -n {} 2>&1)

  [ -n "$CONF_ERROR" ] && show_error "$CONF_ERROR"

  source_dir "$DIR_CMDS/$1" ${@:2}

  PATH="$SAVEPATH"
}

#@function source_or_die [file or dir]
#@ - source a file or directory or die if doesn't exist
source_or_die() {
  [ ! -d "$1" ] && [ ! -f "$1" ] && echo "$1 not found" && exit 404

  #echo "source_or_die $@"

  source_dir "$1" ${@:2} | cat

  STATUS=${PIPESTATUS[0]}
  #echo = source_or_die "$@ $STATUS"
  return $STATUS
}

#@function source_quiet [file or dir]
#@ - source a file or diecectory hide output
source_quiet() {
  source_dir "$1" ${@:2} 2>/dev/null 1>/dev/null

  STATUS=$?
  #echo = source_quiet "$@ $STATUS"
}

#@function source_limit [file or dir]
#@ - source a file or diecectory while limitting output
source_limit() {
  #local BUFFER_FILE="./source_limit_$RANDOM"

  source_dir "$1" ${@:2} 2>&1 | sed -n -e 's/^=\+\s//p'

  STATUS=${PIPESTATUS[0]}

  #(source_dir "$1" ${@:2} && STATUS=$?) 2>&1 1>$BUFFER_FILE
  #cat $BUFFER_FILE | sed -n -e 's/^=\+\s//p'
  #rm $BUFFER_FILE

  #echo "source_limit $@ $STATUS"

  [ 0 != $STATUS ] && echo Error 1 in "$@" && exit $STATUS
}

#@function source_dir [file or dir]
#@ - source a file or directory
source_dir() {
  #echo "= calling source_dir $@"
  if [ -d "$1" ]; then
    #echo "Loading dir $1"

    for x in $(ls "$1"); do
      source_dir "$1/$x" ${@:2}
      #echo = source_dir "$1/$x $STATUS"
    done
  elif [ -f "$1" ]; then
    #echo "Loading file $1"

    source "$1" ${@:2}

    STATUS=$?
    #echo = source "$@" $STATUS
    [ 0 != $STATUS ] && echo Error 2 in "$1" && exit $STATUS
  else
    echo "File does not exist $1"
  fi

  return 0
}

#@function show_header
#@ - show header block with copywrite info
show_header() {
  [ -z "$NO_HEADER" ] && echo -e "
  \E[1mIndigen Build Systems $VER\E[0;33m - Â© $YEAR FRINKnet and Lemurs\E[0m
  \E[33mPrimitive Linux Emulations for Native Compilers on QEMU\E[0m
  \E[34mlemurs.mit-license.org - www.indigen.co - IRC: #indigen\E[0m
  "

  #Indigen Build System $VER Primitive Emulation for Native Compilers
  #Copyright (c) 2013 - FRINKnet and the Expatriated Lemurs of Borneo
  #MIT License: http://lemurs.mit-license.org - indigen.co - #indigen

  NO_HEADER=true
}

#@function show_usage [command file]
#@ - show usage block for command file
show_usage() {
  show_header
  check_init
  show_just_usage "$1"
}

#@function show_just_usage [command file]
#@ - show only usage block for command file
show_just_usage() {
  if [ -n "$1" ]; then
    echo -e "  \E[1mUsage for $(basename $1):\E[0m"
    show_docs call "$CALL" "$1"
    echo -e "\E[0m"

    $(declare -F list_$(basename $1))

    if [ -f "$DIR_HELP/$(basename $1)" ]; then
      echo -e "  \E[1mSee Also:\E[0m"
      echo
      echo "    $CALL help $(basename $1)"
      echo
    fi

    exit 0
  fi

  echo -e "  \E[1mList Usage and Shortcuts:\E[0m\n"
  echo -e "    $CALL list commands\n"
  echo -e "  \E[1mHelp and Tutorials:\E[0m\n"
  echo -e "    $CALL help\n"
  exit
}

#@function show_docs [type] [files]
#@ - show doc comments
show_docs() {
  find $3 -type f -exec sed -n -e "s/^#@$1/\n    $(printf "\e[1m")$2/p" -e "s/^#@ - /    $(printf "\e[0m")/p" {} \;
  printf "\e[0m"
}

#@function check_init
#@ - check populate directories
check_init() {
  [ ! -d "$DIR_CONF" ] && show_init $DIR_CONF
  [ ! -d "$DIR_STGS" ] && show_init $DIR_STGS
  [ ! -d "$DIR_CODE" ] && show_init $DIR_CODE
  [ ! -d "$DIR_CHCK" ] && show_init $DIR_CHCK
}

#@function show_init
#@ - show initialization message
show_init() {
  echo "    Missing $1

  To begin using $CALL you must first inintialize:

    $CALL init
  "
  exit
}

#@function show_error [message] [command file]
#@ - show error message
show_error() {
  [ -n "$OOPS" ] && exit 1
  show_header
  echo -e "    \e[31m$1\e[0m\n"
  show_just_usage $2

  PATH="$SAVEPATH"
  exit 1
}

#@function show_oops
#@ - show error message on death
show_oops() {
  show_error "OOPS!!! Unexpected Death"
}

#@function oops
#@ - exit with oops message
oops() {
  kill -USR1 $TOPSHELL
  exit 1
}

# id of this shell
export TOPSHELL=$$

# trap errors and report
trap show_oops SIGUSR1

# load libraries
source_quiet $DIR_LIBS

# check for arguments
[ -z "$1" ] && show_usage

# run command
indigen $@
