#!/bin/bash

# Define version
export VER="v1.6"
export YEAR="2013"
export CALL="$(basename "$0")"

# Define directories
export DIR_BASE=$(dirname $(readlink -f $0))
export DIR_CONF=$DIR_BASE/config
export DIR_LIBS=$DIR_BASE/library
export DIR_CMDS=$DIR_BASE/commands
export DIR_STGS=$DIR_BASE/stages
export DIR_HELP=$DIR_BASE/help
export DIR_TRGT=$PWD
export DIR_CODE=$DIR_TRGT/sources
export NO_HEADER=""

#@function indigen [command]
#@ - execute an indigen command
indigen() {
  [ -n "$1" ] && [ ! -f "$DIR_CMDS/$1" ] && show_error "'$1' is not a valid command"

  source_dir "$DIR_CMDS/$1" ${@:2}
}

#@function source_or_die [file or dir]
#@ - source a file or directory or die if doesn't exist
source_or_die() {
  #echo "source_or_die $@"

  [ ! -d "$1" ] && [ ! -f "$1" ] && echo "$1 not found" && exit 404

  source_dir "$1" ${@:2} | cat

  STATUS=${PIPESTATUS[0]}
  #echo = source_or_die "$@ $STATUS"
  return $STATUS
}

#@function source_quiet [file or dir]
#@ - source a file or diecectory hide output
source_quiet() {
  source_dir "$1" ${@:2} 2>/dev/null 1>/dev/null

  STATUS=$?
  #echo = source_quiet "$@ $STATUS"
}

#@function source_limit [file or dir]
#@ - source a file or diecectory while limitting output
source_limit() {
  #local BUFFER_FILE="./source_limit_$RANDOM"

  source_dir "$1" ${@:2} 2>&1 | sed -n -e 's/^=\+\s//p'

  STATUS=${PIPESTATUS[0]}

  #(source_dir "$1" ${@:2} && STATUS=$?) 2>&1 1>$BUFFER_FILE
  #cat $BUFFER_FILE | sed -n -e 's/^=\+\s//p'
  #rm $BUFFER_FILE

  #echo "source_limit $@ $STATUS"

  [ 0 != $STATUS ] && echo Error 1 in "$@" && exit $STATUS
}

#@function source_dir [file or dir]
#@ - source a file or directory
source_dir() {
  #echo "= calling source_dir $@"
  if [ -d "$1" ]; then
    #echo "Loading dir $1"

    for x in $(ls "$1"); do
      source_dir "$1/$x" ${@:2}
      #echo = source_dir "$1/$x $STATUS"
    done
  elif [ -f "$1" ]; then
    #echo "Loading file $1"

    source "$1" ${@:2}

    STATUS=$?
    #echo = source "$@" $STATUS
    [ 0 != $STATUS ] && echo Error 2 in "$1" && exit $STATUS
  else
    echo "File does not exist $1"
  fi

  return 0
}

#@function show_header
#@ - show header block with copywrite info
show_header() {
  [ -z "$NO_HEADER" ] && echo -e "
  \E[1mIndigen Build Systems $VER\E[0m - Â© $YEAR FRINKnet and Lemurs
  \E[0mlemurs.mit-license.org - www.indigen.co - IRC: #indigen\E[0m
  \E[0mPrimitive Linux Emulations for Native Compilers on QEMU\E[0m
  "

  #Indigen Build System $VER Primitive Emulation for Native Compilers
  #Copyright (c) 2013 - FRINKnet and the Expatriated Lemurs of Borneo
  #MIT License: http://lemurs.mit-license.org - indigen.co - #indigen

  NO_HEADER=true
}

#@function show_usage [command file]
#@ - show usage block for command file
show_usage() {
  show_header
  show_just_usage "$1"
}

#@function show_just_usage [command file]
#@ - show only usage block for command file
show_just_usage() {
  if [ -n "$1" ]; then
    echo -e "  \E[1mUsage for $(basename $1):\E[0m"
    show_docs call "$CALL" "$1"
    echo -e "\E[0m"

    $(declare -F list_$(basename $1))

    if [ -f "$DIR_HELP/$(basename $1)" ]; then
      echo "  See Also:"
      echo
      echo "    $CALL help $(basename $1)"
      echo
    fi

    exit 0
  fi

  echo "  List Usage and Shortcuts:"
  echo
  echo "    $CALL list commands"
  echo
  echo "  Help and Tutorials:"
  echo
  echo "    $CALL help"
  echo
  exit 0
}

#@function show_docs [type] [files]
#@ - show doc comments
show_docs() {
  find $3 -type f -exec sed -n -e "s/^#@$1/\n    $2/p" -e "s/^#@ - /\n       /p" {} \;
}

#@function show_error [message] [command file]
#@ - show error message
show_error() {
  show_header
  echo "    $1"
  echo
  show_just_usage $2
  exit 1
}

# load functions
source_quiet $DIR_LIBS

# Check for arguments and show usage
[ -z "$1" ] && show_usage

# run command
indigen $@
